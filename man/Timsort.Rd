% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Timsort.R
\name{Timsort}
\alias{Timsort}
\title{Timsort}
\usage{
Timsort(x, situation = c("insitu", "exsitu"), method = c("pointer", "index"))
}
\arguments{
\item{x}{a double vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data abnd buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}
}
\value{
like \code{\link{retperf}}
}
\description{
The well-known algorithm of Tim Peters as implemented in C++ by Timothy Van Slyke
}
\details{
Timsort is a Natural Mergesort heavily tuned to be (ON(N)) adaptive to
(perfectly) presorted data, however, Timsort is based on an inefficient merge
which moves data twice per merge, and the heavy tuning makes it slower when
it comes to sorting truly unsorted data.

See \code{\link[greeNsort]{algodb}} for the complete table of algorithms.
}
\note{
The Code under the MIT-Licence is taken from \url{https://github.com/tvanslyke/timsort-cpp/}
}
\examples{
n <- 2^10
x <- runif(n)
Timsort(x)
x <- as.double(1:n)
Timsort(x)
}
\seealso{
\code{\link[greeNsort]{Omitsort}}
}
